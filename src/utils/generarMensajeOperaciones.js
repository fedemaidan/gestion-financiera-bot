// helpers.js
const { formatCurrency } = require('../utils/formatCurrency');

function generarMensajeCheque(cheque, index, flowData, descuento) {
    return `‚úÖ Cheque ${index + 1}:

` +
        `- *Monto*: ${formatCurrency(cheque.monto) || 'No detectado'}\n` +
        `- *N√∫mero de comprobante*: ${cheque.numero_comprobante || 'No detectado'}\n` +
        `- *Banco emisor*: ${cheque.banco_emisor || 'No detectado'}\n` +
        `- *Cliente Emisor*: ${flowData.clienteEmisor || 'No especificado'}\n` +
        `- *Cliente Receptor*: ${flowData.clienteReceptor || 'No especificado'}\n` +
        `- *Tipo de Cheque*: ${cheque.tipoCheque}\n\n` +
        `Resumen de descuentos:\n` +
        `- Descuento Cheque (1.8%): ${formatCurrency(cheque.descuentoGeneral)}\n` +
        `- Descuento ${cheque.tipoCheque} (${descuento}%): ${formatCurrency(cheque.descuento)}\n` +
        `- **Total a recibir**: ${formatCurrency(cheque.total)}\n\n`;
}

function generarResumenOperacion(montoTotal) {
    return `üí∞ *Total de la operaci√≥n:* ${formatCurrency(montoTotal)}\n\n` +
        `Confirmar si los datos est√°n correctos:\n\n` +
        `1Ô∏è‚É£ Si, continuemos\n2Ô∏è‚É£ No, modificar un cheque`;
}

function generarMensajeTransferencia(transferencia, flowData) {
    return `‚úÖ He detectado los siguientes datos de la transferencia:\n\n` +
        `- *Monto*: ${formatCurrency(transferencia.monto) || 'No detectado'}\n` +
        `- *N√∫mero de comprobante*: ${transferencia.numero_comprobante || 'No detectado'}\n` +
        `- *Banco emisor*: ${transferencia.banco_emisor || 'No detectado'}\n` //+
        // `- *Cliente Emisor*: ${flowData.clienteEmisor || 'No especificado'}\n` +
        // `- *Cliente Receptor*: ${flowData.clienteReceptor || 'No especificado'}\n\n` +
        // `¬øDeseas confirmar esta operaci√≥n?\n\n1Ô∏è‚É£ Confirmar\n2Ô∏è‚É£ Cancelar\n3Ô∏è‚É£ Modificar alg√∫n dato`;
}

function generarMensajeSeleccionProveedor(proveedores) {
    if (proveedores.length === 0) {
        return 'No se encontraron proveedores. Escribe el nombre manualmente.';
    }

    let mensaje = "Selecciona un proveedor:\n\n";
    proveedores.forEach((prov, index) => {
        mensaje += `${index + 1}Ô∏è‚É£ ${prov.nombre}\n`;
    });

    mensaje += `\nO escribe el nombre manualmente si no est√° en la lista.`;
    return mensaje;
}

function generarMensajeConfirmacionOperacion(flowData, comprobante) {
    return `‚úÖ Perfecto, estos son los datos recopilados:\n\n` +
        `- *Monto*: ${formatCurrency(comprobante.monto) || 'No detectado'}\n` +
        `- *N√∫mero de comprobante*: ${comprobante.numero_comprobante || 'No detectado'}\n` +
        `- *Banco emisor*: ${comprobante.banco_emisor || 'No detectado'}\n` +
        `- *Cliente Emisor*: ${flowData.clienteEmisor || 'No especificado'}\n` +
        `- *Cliente Receptor*: ${flowData.clienteReceptor || 'No especificado'}\n` +
        `- *Tipo de Cheque*: ${comprobante.tipoCheque}\n\n` +
        `Resumen de descuentos:\n` +
        `- Descuento transferencia (2%): ${formatCurrency(comprobante.descuentoGeneral)}\n` +
        `- Descuento transferencia (1%): ${formatCurrency(comprobante.descuento)}\n` +
        `- **Total a recibir**: ${formatCurrency(comprobante.total)}\n\n` +
        `¬øDeseas confirmar esta operaci√≥n?\n\n1Ô∏è‚É£ Confirmar\n2Ô∏è‚É£ Cancelar\n3Ô∏è‚É£ Modificar alg√∫n dato`;
}

function generarMensajeModificacion(flowData, comprobante) {
    return `‚úÖ Modificaci√≥n aplicada:\n\n` +
        `- *Monto:* ${formatCurrency(comprobante.monto)}\n` +
        `- *Banco:* ${comprobante.banco_emisor}\n` +
        `- *N√∫mero:* ${comprobante.numero_comprobante}\n` +
        `- *Fecha de pago:* ${comprobante.fecha_pago}\n\n` +
        `Confirme si los datos son correctos:\n\n1Ô∏è‚É£ Si, continuemos\n2Ô∏è‚É£ No, modificar otro cheque`;
}

module.exports = { generarMensajeCheque, generarResumenOperacion, generarMensajeTransferencia, generarMensajeSeleccionProveedor, generarMensajeConfirmacionOperacion, generarMensajeModificacion };
